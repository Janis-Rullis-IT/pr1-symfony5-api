# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
        
    # mapping interface to production repositories
    App\Interfaces\IUserRepo: '@UserRepo'
    App\Interfaces\IProductRepo: '@ProductRepo'
    App\Interfaces\IOrderRepo: '@OrderRepo'
    App\Interfaces\IRelationRepo: '@RelationRepo'

    # -------- repositories pointed to by interface --------
    UserRepo:
        class: App\Repository\Prod\UserRepo

    ProductRepo:
        class: App\Repository\Prod\ProductRepo

    OrderRepo:
        class: App\Repository\Prod\OrderRepo

    RelationRepo:
       class: App\Repository\Prod\RelationRepo

    # -------- services --------

    App\EventListener\ExceptionListener:
        tags:
            - {name: kernel.event_listener, event: kernel.exception}


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # #38 Make v2 services accessible for tests via aliase). https://symfony.com/doc/current/service_container/alias_private.html#aliasing 
    # #38 This creates a public alias: even though the original service is private. https://symfonycasts.com/screencast/phpunit/integration-tests
    test.App\v2\OrderProductCreator:
        alias: App\v2\OrderProductCreator
        public: true
        
    # 40
    test.App\v2\OrderCreator:
        alias: App\v2\OrderCreator
        public: true
     
    test.App\v2\OrderValidator:
        alias: App\v2\OrderValidator
        public: true
    
    # #36 #38
    test.App\Interfaces\v2\IOrderRepo:
        alias: App\Interfaces\v2\IOrderRepo
        public: true
        
    # #36 #38
    test.App\Interfaces\v2\IOrderProductRepo:
        alias: App\Interfaces\v2\IOrderProductRepo
        public: true